// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/yanadhiwiranata/go-test-clean-arch/domain"
)

// BookRepository is an autogenerated mock type for the BookRepository type
type BookRepository struct {
	mock.Mock
}

// FilterByID provides a mock function with given fields: ctx, id
func (_m *BookRepository) FilterByID(ctx context.Context, id string) (domain.Book, error) {
	ret := _m.Called(ctx, id)

	var r0 domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Book); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterBySubject provides a mock function with given fields: ctx, subject
func (_m *BookRepository) FilterBySubject(ctx context.Context, subject string) ([]domain.Book, error) {
	ret := _m.Called(ctx, subject)

	var r0 []domain.Book
	if rf, ok := ret.Get(0).(func(context.Context, string) []domain.Book); ok {
		r0 = rf(ctx, subject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Index provides a mock function with given fields: ctx
func (_m *BookRepository) Index(ctx context.Context) ([]domain.Book, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Book
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Book); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Book)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookRepository creates a new instance of BookRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookRepository(t mockConstructorTestingTNewBookRepository) *BookRepository {
	mock := &BookRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
